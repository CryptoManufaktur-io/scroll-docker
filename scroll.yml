x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  scroll-init:
    restart: "no"
    build:
      context: ./init
      dockerfile: Dockerfile
    image: init:scroll
    pull_policy: never
    environment:
      - SNAPSHOT=${SNAPSHOT:-}
    volumes:
      - scroll-data:/var/lib/l2geth
      - /etc/localtime:/etc/localtime:ro

  l2geth:
    restart: "unless-stopped"
    image: scrolltech/l2geth:${L2GETH_DOCKER_TAG}
    stop_grace_period: 5m
    volumes:
      - scroll-data:/var/lib/l2geth
      - ./docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NETWORK_ID: ${NETWORK_ID:-534352}
      MPT_NODE: ${MPT_NODE}
      EXTRAS: ${EXTRAS}
      L2GETH_P2P_BOOTNODES: ${L2GETH_P2P_BOOTNODES}
    depends_on:
      scroll-init:
        condition: service_completed_successfully
    <<: *logging
    entrypoint:
      - docker-entrypoint.sh
      - geth
      - --datadir
      - /var/lib/l2geth
      - --scroll
      - --cache.noprefetch
      - --networkid
      - ${NETWORK_ID:-534352}
      - --http
      - --http.addr
      - 0.0.0.0
      - --http.port
      - ${RPC_PORT}
      - --http.api
      - eth,net,web3,debug,scroll
      - --http.vhosts=*
      - --http.corsdomain=*
      - --ws
      - --ws.addr
      - 0.0.0.0
      - --ws.port
      - ${WS_PORT:-8546}
      - --ws.origins=*
      - --metrics
      - --metrics.expensive
      - --metrics.addr
      - 0.0.0.0
      - --l1.endpoint
      - ${L1_RPC}
      - --da.blob.beaconnode
      - ${L1_BEACON}
      - --rollup.verify
      - --snapshot=${SNAPSHOT_FLAG:-true}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${RPC_HOST:-scroll}.service=${RPC_HOST:-scroll}
      - traefik.http.routers.${RPC_HOST:-scroll}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-scroll}.rule=Host(`${RPC_HOST:-scroll}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-scroll}.tls.certresolver=letsencrypt
      - traefik.http.routers.${RPC_HOST:-scroll}lb.service=${RPC_HOST:-scroll}
      - traefik.http.routers.${RPC_HOST:-scroll}lb.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-scroll}lb.rule=Host(`${RPC_LB:-scroll-lb}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-scroll}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST:-scroll}.loadbalancer.server.port=${RPC_PORT:-8545}
      - traefik.http.routers.${WS_HOST:-scrollws}.service=${WS_HOST:-scrollws}
      - traefik.http.routers.${WS_HOST:-scrollws}.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-scrollws}.rule=Host(`${WS_HOST:-scrollws}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-scrollws}.tls.certresolver=letsencrypt
      - traefik.http.routers.${WS_HOST:-scrollws}lb.service=${WS_HOST:-scrollws}
      - traefik.http.routers.${WS_HOST:-scrollws}lb.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-scrollws}lb.rule=Host(`${WS_LB:-scrollws-lb}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-scrollws}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${WS_HOST:-scrollws}.loadbalancer.server.port=${WS_PORT:-8546}
      - metrics.scrape=true
      - metrics.path=/debug/metrics/prometheus
      - metrics.port=6060
      - metrics.network=scroll

volumes:
  scroll-data:
